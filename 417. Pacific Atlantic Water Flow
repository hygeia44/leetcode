class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        pac, alt = set(), set()
        m=len(heights)
        n= len(heights[0])
        
        def dfs(r, c, visit):
            visit.add((r,c))
            direction = [(-1, 0), (1,0), (0, -1), (0,1)]
            for i, j in direction:
                row = r + i
                col = c + j
                if 0<= row< m and 0<=col<n and (row, col) not in visit and heights[row][col]>=heights[r][c]:
                    visit.add((row, col))
                    dfs(row, col, visit)
            return
        
        for a in range(n):
            dfs(0, a, pac ) #first row and last row
            dfs(m-1, a, alt)
        for b in range(m): #first colume and last colume
            dfs(b, 0, pac)
            dfs(b, n-1, alt)
        
        # return pac.intersection(alt)
        res = []
        for i in range(m):
            for j in range(n):
                if (i, j) in pac and (i,j) in alt:
                    res.append((i,j))
        return res

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        rows = len(heights)
        cols = len(heights[0])
        pac =set()
        alt = set ()
        dirc = ((1,0), (-1,0), (0,1), (0,-1))
        res=[]
        def dfs(mat, i, j, visited):
            if (i,j) in visited:
                return
            visited.add((i,j))
            for x,y in dirc:
                newi, newj = i+x, j+y 
                if 0<=newi<rows and 0<=newj<cols and mat[newi][newj]>= mat[i][j]:
                    dfs(mat, newi, newj, visited)

        for i in range(rows):
            dfs(heights, i, 0, alt)
            dfs(heights, i, cols-1, pac)
        for j in range(cols):
            dfs(heights, 0, j, alt)
            dfs(heights, rows-1, j, pac)

        for i,j in alt:
            if (i,j) in pac:
                res.append([i,j])
        return res
        
