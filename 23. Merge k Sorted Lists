class ListNode:
    def __init__(self, val = 0, next=None):
        self.val = val
        self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        
        
        
        
        # if not lists or len(lists)==0:
        if not lists:
            return None
        
        while len(lists) > 1:
            mer = []
            for i in range(0, len(lists), 2):
                l1= lists[i]
                l2 = lists[i+1] if (i+1)< len(lists) else None
                mer.append(self.dfs(l1, l2))
            lists = mer
        return lists[0]
        # return dfs([1,4,5],[1,3,4])
        
        
    def dfs(self, l1, l2):
        res = ListNode()
        dummy = res
        while l1 and l2:
            if l1.val > l2.val:
                dummy.next = l2
                l2 = l2.next
            else: 
                dummy.next = l1
                l1 = l1.next
            dummy = dummy.next
        if l1:
            dummy.next = l1
        if l2:
            dummy.next = l2
        return res.next   
            
