class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        cnt = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=='1':
                    
                    self.dfs(grid, i, j)
                    cnt +=1
        return cnt
    
    
    
    
    def dfs(self, mat, i, j):
        if i< 0 or i>= len(mat) or j < 0 or j>=len(mat[0]) or mat[i][j]!='1':
            return
        mat[i][j]='#'
        self.dfs(mat, i+1, j)
        self.dfs(mat, i-1, j)
        self.dfs(mat, i, j+1)
        self.dfs(mat, i, j-1)






########### version2
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        # visit = set()
        
        def dfs(r, c):
            if r<0 or r>=len(grid) or c <0 or c>=len(grid[0]):
                return
            if grid [r][c] != '1':
                return
            # direction = [(1,0), (-1,0), (0,1), (0,-1)]
            
            grid[r][c]="#"
                # visit.add((r,c))
            dfs(r+1, c)
            dfs(r-1, c)
            dfs(r, c+1)
            dfs(r, c-1)
            # return
        
        res = 0
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]== '1' :
                    res+=1
                    dfs(r,c)
        return res


    # def numIslands(self, grid: List[List[str]]) -> int:
    #     visit = set()
        
#         def dfs(r, c):
#             if r<0 or r>=len(grid) or c <0 or c>=len(grid[0]):
#                 return
#             if grid [r][c] != '1':
#                 return
#             if (r,c) in visit:
#                 return
#             # if (r in range(len(grid)) and
#             #     c in range(len(grid[0])) and
#             #     grid [r][c] == '1'):
#             #     visit.add((r,c))
#             # direction = [(1,0), (-1,0), (0,1), (0,-1)]
#             visit.add((r,c))
         
#                 # visit.add((r,c))
#             dfs(r+1, c)
#             dfs(r-1, c)
#             dfs(r, c+1)
#             dfs(r, c-1)
#             # return
        
#         res = 0
#         for r in range(len(grid)):
#             for c in range(len(grid[0])):
#                 if grid[r][c]== '1' and (r,c) not in visit :
#                     res+=1
                    
#                     dfs(r,c)
#         return res
